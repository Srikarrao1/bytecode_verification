const fs = require('fs');
const path = require('path');
const { ethers } = require('ethers');

// Load the contract ABI and deployed bytecode from the artifact
const artifactPath = path.join(__dirname, '../artifacts/contracts/srikar.sol/APS.json');
const artifact = JSON.parse(fs.readFileSync(artifactPath, 'utf8'));
const abi = artifact.abi;
const deployedBytecode = artifact.deployedBytecode;

function analyzeBytecode(onChainBytecode, deployedBytecode, abi) {
  onChainBytecode = remove0x(onChainBytecode);
  deployedBytecode = remove0x(deployedBytecode);

  console.log(`Deployed Bytecode Length: ${deployedBytecode.length}`);
  console.log(`On-Chain Bytecode Length: ${onChainBytecode.length}`);

  const metadataStart = deployedBytecode.indexOf('a264') > -1
    ? deployedBytecode.indexOf('a264')
    : deployedBytecode.indexOf('a165');

  if (metadataStart === -1) {
    console.error('Could not find metadata in bytecode.');
    return null;
  }

  const metadata = deployedBytecode.slice(metadataStart);
  console.log('Metadata:', metadata);

  const ipfsHash = extractIPFSHash(metadata);
  const solidityVersion = extractSolidityVersion(metadata);

  const strippedDeployedBytecode = deployedBytecode.slice(0, metadataStart);
  const remainingData = onChainBytecode.slice(strippedDeployedBytecode.length);

  let constructorArgs = {};
  if (remainingData !== metadata) {
    const constructorArgsHex = remainingData.slice(0, -metadata.length);
    if (constructorArgsHex.length > 0) {
      constructorArgs = decodeConstructorArgs(constructorArgsHex, abi);
    } else {
      console.log('No constructor arguments found.');
    }
  } else {
    console.log('No constructor arguments found.');
  }

  return {
    metadata,
    ipfsHash,
    solidityVersion,
    constructorArgs
  };
}

function extractIPFSHash(metadata) {
  const possibleHash = metadata.slice(8, 72);
  return `Qm${possibleHash}`;
}

function extractSolidityVersion(metadata) {
  const versionHex = metadata.slice(-8);
  const version = parseInt(versionHex, 16);
  return `0.${Math.floor(version / 65536)}.${version % 65536}`;
}

function decodeConstructorArgs(argsHex, abi) {
  const constructorAbi = abi.find(item => item.type === 'constructor');
  if (!constructorAbi) {
    console.log('No constructor found in ABI.');
    return {};
  }

  try {
    const abiCoder = new ethers.AbiCoder();
    const decodedArgs = abiCoder.decode(constructorAbi.inputs, '0x' + argsHex);

    const result = {};
    constructorAbi.inputs.forEach((input, index) => {
      const value = decodedArgs[index];
      result[input.name] = ethers.BigNumber.isBigNumber(value)
        ? value.toString()
        : value;
    });

    return result;
  } catch (error) {
    console.error('Error decoding constructor arguments:', error);
    return {};
  }
}

function remove0x(str) {
  return str.startsWith('0x') ? str.slice(2) : str;
}

function extractConstructorArgs(onChainBytecode, deployedBytecode, abi) {
  onChainBytecode = remove0x(onChainBytecode);
  deployedBytecode = remove0x(deployedBytecode);

  const metadataStart = deployedBytecode.indexOf('a264') > -1
    ? deployedBytecode.indexOf('a264')
    : deployedBytecode.indexOf('a165');
  const strippedDeployedBytecode = deployedBytecode.slice(0, metadataStart);

  if (!onChainBytecode.startsWith(strippedDeployedBytecode)) {
    console.error('Deployed bytecode does not match the beginning of the on-chain bytecode.');
    return null;
  }

  const constructorArgsHex = onChainBytecode.slice(strippedDeployedBytecode.length);
  console.log('Raw Constructor Arguments (hex):', constructorArgsHex);

  if (constructorArgsHex.length === 0) {
    console.log('No constructor arguments found.');
    return {};
  }

  return decodeConstructorArgs(constructorArgsHex, abi);
}

// Main execution
function main(onChainBytecode) {
  console.log('Starting bytecode analysis...');
  
  const result = analyzeBytecode(onChainBytecode, deployedBytecode, abi);
  if (result) {
    console.log('Analysis Results:');
    console.log('IPFS Hash:', result.ipfsHash);
    console.log('Solidity Version:', result.solidityVersion);
    console.log('Constructor Arguments:', result.constructorArgs);
  } else {
    console.log('Failed to analyze bytecode.');
  }

  console.log('\nExtracting constructor arguments...');
  const constructorArgs = extractConstructorArgs(onChainBytecode, deployedBytecode, abi);
  if (constructorArgs !== null) {
    console.log('Extracted Constructor Arguments:');
    for (const [key, value] of Object.entries(constructorArgs)) {
      console.log(`${key}: ${value}`);
    }
  } else {
    console.log('Failed to extract constructor arguments.');
  }
}
// Sample execution
const sampleOnChainBytecode = '0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c806370a082311161008c578063a9059cbb11610066578063a9059cbb146101e7578063d73dd623146101fa578063dd62ed3e1461020d578063f2fde38b1461024657600080fd5b806370a082311461018b5780638da5cb5b146101b457806395d89b41146101df57600080fd5b806323b872dd116100c857806323b872dd14610147578063313ce5671461015a57806342966c6814610163578063661884631461017857600080fd5b806306fdde03146100ef578063095ea7b31461010d57806318160ddd14610130575b600080fd5b6100f7610259565b6040516101049190610b1c565b60405180910390f35b61012061011b366004610b86565b6102e7565b6040519015158152602001610104565b61013960035481565b604051908152602001610104565b610120610155366004610bb0565b610354565b61013960065481565b610176610171366004610bed565b610537565b005b610120610186366004610b86565b6106cd565b610139610199366004610c06565b6001600160a01b031660009081526001602052604090205490565b6000546101c7906001600160a01b031681565b6040516001600160a01b039091168152602001610104565b6100f76107b5565b6101206101f5366004610b86565b6107c2565b610120610208366004610b86565b61093b565b61013961021b366004610c21565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b610176610254366004610c06565b6109c0565b6004805461026690610c54565b80601f016020809104026020016040519081016040528092919081815260200182805461029290610c54565b80156102df5780601f106102b4576101008083540402835291602001916102df565b820191906000526020600020905b8154815290600101906020018083116102c257829003601f168201915b505050505081565b3360008181526002602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906103429086815260200190565b60405180910390a35060015b92915050565b60006001600160a01b03831661036957600080fd5b6001600160a01b0384166000908152600160205260409020548211156103cc5760405162461bcd60e51b815260206004820152601360248201527202737ba1032b737bab3b4103130b630b731b29606d1b60448201526064015b60405180910390fd5b6001600160a01b038416600090815260026020908152604080832033845290915290205482111561043f5760405162461bcd60e51b815260206004820152601760248201527f616c6c6f77616e6365206e6f742061637469766174652000000000000000000060448201526064016103c3565b6001600160a01b0384166000908152600160205260409020546104629083610ada565b6001600160a01b0380861660009081526001602052604080822093909355908516815220546104919083610afd565b6001600160a01b0380851660009081526001602090815260408083209490945591871681526002825282812033825290915220546104cf9083610ada565b6001600160a01b03858116600081815260026020908152604080832033845282529182902094909455518581529186169290917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35060019392505050565b6000546001600160a01b031633146105915760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103c3565b600080546001600160a01b03168152600160205260409020548111156105f95760405162461bcd60e51b815260206004820181905260248201527f534b4f3a206275726e20616d6f756e7420657863656564732062616c616e636560448201526064016103c3565b600080546001600160a01b031681526001602052604090205461061c9082610ada565b600080546001600160a01b03168152600160205260409020556003546106429082610ada565b6003556000546040518281526001600160a01b03909116907fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59060200160405180910390a2600080546040518381526001600160a01b03909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a350565b3360009081526002602090815260408083206001600160a01b038616845290915281205480831115610722573360009081526002602090815260408083206001600160a01b0388168452909152812055610751565b61072c8184610ada565b3360009081526002602090815260408083206001600160a01b03891684529091529020555b3360008181526002602090815260408083206001600160a01b038916808552908352928190205490519081529192917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a35060019392505050565b6005805461026690610c54565b60006001600160a01b03831661082e5760405162461bcd60e51b815260206004820152602b60248201527f5374616e64617264546f6b656e3a207472616e7366657220746f20746865207a60448201526a65726f206164647265737360a81b60648201526084016103c3565b336000908152600160205260409020548211156108a45760405162461bcd60e51b815260206004820152602e60248201527f5374616e64617264546f6b656e3a207472616e7366657220616d6f756e74206560448201526d7863656564732062616c616e636560901b60648201526084016103c3565b336000908152600160205260409020546108be9083610ada565b33600090815260016020526040808220929092556001600160a01b038516815220546108ea9083610afd565b6001600160a01b0384166000818152600160205260409081902092909255905133907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906103429086815260200190565b3360009081526002602090815260408083206001600160a01b03861684529091528120546109699083610afd565b3360008181526002602090815260408083206001600160a01b038916808552908352928190208590555193845290927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259101610342565b6000546001600160a01b03163314610a1a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103c3565b6001600160a01b038116610a7f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103c3565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b600082821115610aec57610aec610c8e565b610af68284610cba565b9392505050565b600080610b0a8385610ccd565b905083811015610af657610af6610c8e565b602081526000825180602084015260005b81811015610b4a5760208186018101516040868401015201610b2d565b506000604082850101526040601f19601f83011684010191505092915050565b80356001600160a01b0381168114610b8157600080fd5b919050565b60008060408385031215610b9957600080fd5b610ba283610b6a565b946020939093013593505050565b600080600060608486031215610bc557600080fd5b610bce84610b6a565b9250610bdc60208501610b6a565b929592945050506040919091013590565b600060208284031215610bff57600080fd5b5035919050565b600060208284031215610c1857600080fd5b610af682610b6a565b60008060408385031215610c3457600080fd5b610c3d83610b6a565b9150610c4b60208401610b6a565b90509250929050565b600181811c90821680610c6857607f821691505b602082108103610c8857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561034e5761034e610ca4565b8082018082111561034e5761034e610ca456fea264697066735822122080c0e81602d873924fd4f785a1ba997a055fdbeeea0703351e6e4ba9c26ab3bd64736f6c634300081b0033';

main(sampleOnChainBytecode);