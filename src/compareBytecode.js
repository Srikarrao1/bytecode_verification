const fs = require('fs');
const path = require('path');

// Function to remove Solidity metadata (identified by the 0xa264 marker)
function removeMetadata(bytecode) {
    const metadataStart = bytecode.indexOf('a264'); // Find the starting point of metadata (0xa264)
    return metadataStart !== -1 ? bytecode.slice(0, metadataStart) : bytecode;
}

// Read the on-chain bytecode (replace this with your actual on-chain bytecode)
const onChainBytecode = '0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c806370a082311161008c578063a9059cbb11610066578063a9059cbb146101e7578063d73dd623146101fa578063dd62ed3e1461020d578063f2fde38b1461024657600080fd5b806370a082311461018b5780638da5cb5b146101b457806395d89b41146101df57600080fd5b806323b872dd116100c857806323b872dd14610147578063313ce5671461015a57806342966c6814610163578063661884631461017857600080fd5b806306fdde03146100ef578063095ea7b31461010d57806318160ddd14610130575b600080fd5b6100f7610259565b6040516101049190610b1c565b60405180910390f35b61012061011b366004610b86565b6102e7565b6040519015158152602001610104565b61013960035481565b604051908152602001610104565b610120610155366004610bb0565b610354565b61013960065481565b610176610171366004610bed565b610537565b005b610120610186366004610b86565b6106cd565b610139610199366004610c06565b6001600160a01b031660009081526001602052604090205490565b6000546101c7906001600160a01b031681565b6040516001600160a01b039091168152602001610104565b6100f76107b5565b6101206101f5366004610b86565b6107c2565b610120610208366004610b86565b61093b565b61013961021b366004610c21565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b610176610254366004610c06565b6109c0565b6004805461026690610c54565b80601f016020809104026020016040519081016040528092919081815260200182805461029290610c54565b80156102df5780601f106102b4576101008083540402835291602001916102df565b820191906000526020600020905b8154815290600101906020018083116102c257829003601f168201915b505050505081565b3360008181526002602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906103429086815260200190565b60405180910390a35060015b92915050565b60006001600160a01b03831661036957600080fd5b6001600160a01b0384166000908152600160205260409020548211156103cc5760405162461bcd60e51b815260206004820152601360248201527202737ba1032b737bab3b4103130b630b731b29606d1b60448201526064015b60405180910390fd5b6001600160a01b038416600090815260026020908152604080832033845290915290205482111561043f5760405162461bcd60e51b815260206004820152601760248201527f616c6c6f77616e6365206e6f742061637469766174652000000000000000000060448201526064016103c3565b6001600160a01b0384166000908152600160205260409020546104629083610ada565b6001600160a01b0380861660009081526001602052604080822093909355908516815220546104919083610afd565b6001600160a01b0380851660009081526001602090815260408083209490945591871681526002825282812033825290915220546104cf9083610ada565b6001600160a01b03858116600081815260026020908152604080832033845282529182902094909455518581529186169290917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35060019392505050565b6000546001600160a01b031633146105915760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103c3565b600080546001600160a01b03168152600160205260409020548111156105f95760405162461bcd60e51b815260206004820181905260248201527f534b4f3a206275726e20616d6f756e7420657863656564732062616c616e636560448201526064016103c3565b600080546001600160a01b031681526001602052604090205461061c9082610ada565b600080546001600160a01b03168152600160205260409020556003546106429082610ada565b6003556000546040518281526001600160a01b03909116907fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59060200160405180910390a2600080546040518381526001600160a01b03909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a350565b3360009081526002602090815260408083206001600160a01b038616845290915281205480831115610722573360009081526002602090815260408083206001600160a01b0388168452909152812055610751565b61072c8184610ada565b3360009081526002602090815260408083206001600160a01b03891684529091529020555b3360008181526002602090815260408083206001600160a01b038916808552908352928190205490519081529192917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a35060019392505050565b6005805461026690610c54565b60006001600160a01b03831661082e5760405162461bcd60e51b815260206004820152602b60248201527f5374616e64617264546f6b656e3a207472616e7366657220746f20746865207a60448201526a65726f206164647265737360a81b60648201526084016103c3565b336000908152600160205260409020548211156108a45760405162461bcd60e51b815260206004820152602e60248201527f5374616e64617264546f6b656e3a207472616e7366657220616d6f756e74206560448201526d7863656564732062616c616e636560901b60648201526084016103c3565b336000908152600160205260409020546108be9083610ada565b33600090815260016020526040808220929092556001600160a01b038516815220546108ea9083610afd565b6001600160a01b0384166000818152600160205260409081902092909255905133907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906103429086815260200190565b3360009081526002602090815260408083206001600160a01b03861684529091528120546109699083610afd565b3360008181526002602090815260408083206001600160a01b038916808552908352928190208590555193845290927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259101610342565b6000546001600160a01b03163314610a1a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103c3565b6001600160a01b038116610a7f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103c3565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b600082821115610aec57610aec610c8e565b610af68284610cba565b9392505050565b600080610b0a8385610ccd565b905083811015610af657610af6610c8e565b602081526000825180602084015260005b81811015610b4a5760208186018101516040868401015201610b2d565b506000604082850101526040601f19601f83011684010191505092915050565b80356001600160a01b0381168114610b8157600080fd5b919050565b60008060408385031215610b9957600080fd5b610ba283610b6a565b946020939093013593505050565b600080600060608486031215610bc557600080fd5b610bce84610b6a565b9250610bdc60208501610b6a565b929592945050506040919091013590565b600060208284031215610bff57600080fd5b5035919050565b600060208284031215610c1857600080fd5b610af682610b6a565b60008060408385031215610c3457600080fd5b610c3d83610b6a565b9150610c4b60208401610b6a565b90509250929050565b600181811c90821680610c6857607f821691505b602082108103610c8857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561034e5761034e610ca4565b8082018082111561034e5761034e610ca456fea2646970667358221220554dc8ce868d5cbd4681fd9ff9c94fc05f69a04cfd64267b58afa6fe7c0f3aff64736f6c634300081a0033';

// Read the local bytecode from the compiled artifact
const artifactPath = path.join(__dirname, '../artifacts/contracts/srikar.sol/APS.json');
const artifact = JSON.parse(fs.readFileSync(artifactPath, 'utf8'));0x6080604052600436106100345760003560e01c806360b0b0f014610039578063c279c6ab14610062578063d9d83c4f1461007e575b600080fd5b34801561004557600080fd5b50610060600480360381019061005b91906103cf565b61009a565b005b61007c60048036038101906100779190610669565b61016d565b005b61009860048036038101906100939190610669565b610241565b005b8073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b81526004016100d793929190610712565b6020604051808303816000875af11580156100f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061011a9190610781565b503373ffffffffffffffffffffffffffffffffffffffff167f183acc66c620067997cf7cf46984853be56cb9b74a2bb70fc8748aa5c0a4baa48360405161016191906107ae565b60405180910390a25050565b60005b835181101561023b578173ffffffffffffffffffffffffffffffffffffffff166323b872dd338684815181106101a9576101a86107c9565b5b60200260200101518685815181106101c4576101c36107c9565b5b60200260200101516040518463ffffffff1660e01b81526004016101ea93929190610857565b6020604051808303816000875af1158015610209573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022d9190610781565b508080600101915050610170565b50505050565b60005b835181101561030f578173ffffffffffffffffffffffffffffffffffffffff166323b872dd3386848151811061027d5761027c6107c9565b5b6020026020010151868581518110610298576102976107c9565b5b60200260200101516040518463ffffffff1660e01b81526004016102be93929190610857565b6020604051808303816000875af11580156102dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103019190610781565b508080600101915050610244565b50505050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61033c81610329565b811461034757600080fd5b50565b60008135905061035981610333565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061038a8261035f565b9050919050565b600061039c8261037f565b9050919050565b6103ac81610391565b81146103b757600080fd5b50565b6000813590506103c9816103a3565b92915050565b600080604083850312156103e6576103e561031f565b5b60006103f48582860161034a565b9250506020610405858286016103ba565b9150509250929050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61045d82610414565b810181811067ffffffffffffffff8211171561047c5761047b610425565b5b80604052505050565b600061048f610315565b905061049b8282610454565b919050565b600067ffffffffffffffff8211156104bb576104ba610425565b5b602082029050602081019050919050565b600080fd5b60006104dc8261035f565b9050919050565b6104ec816104d1565b81146104f757600080fd5b50565b600081359050610509816104e3565b92915050565b600061052261051d846104a0565b610485565b90508083825260208201905060208402830185811115610545576105446104cc565b5b835b8181101561056e578061055a88826104fa565b845260208401935050602081019050610547565b5050509392505050565b600082601f83011261058d5761058c61040f565b5b813561059d84826020860161050f565b91505092915050565b600067ffffffffffffffff8211156105c1576105c0610425565b5b602082029050602081019050919050565b60006105e56105e0846105a6565b610485565b90508083825260208201905060208402830185811115610608576106076104cc565b5b835b81811015610631578061061d888261034a565b84526020840193505060208101905061060a565b5050509392505050565b600082601f8301126106505761064f61040f565b5b81356106608482602086016105d2565b91505092915050565b6000806000606084860312156106825761068161031f565b5b600084013567ffffffffffffffff8111156106a05761069f610324565b5b6106ac86828701610578565b935050602084013567ffffffffffffffff8111156106cd576106cc610324565b5b6106d98682870161063b565b92505060406106ea868287016103ba565b9150509250925092565b6106fd8161037f565b82525050565b61070c81610329565b82525050565b600060608201905061072760008301866106f4565b61073460208301856106f4565b6107416040830184610703565b949350505050565b60008115159050919050565b61075e81610749565b811461076957600080fd5b50565b60008151905061077b81610755565b92915050565b6000602082840312156107975761079661031f565b5b60006107a58482850161076c565b91505092915050565b60006020820190506107c36000830184610703565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000819050919050565b600061081d6108186108138461035f565b6107f8565b61035f565b9050919050565b600061082f82610802565b9050919050565b600061084182610824565b9050919050565b61085181610836565b82525050565b600060608201905061086c60008301866106f4565b6108796020830185610848565b6108866040830184610703565b94935050505056fea264697066735822122022f8334f3f1d69d90100f070d07354178d4e141c23a1a09cd914ec801d63241d64736f6c63430008180033
const localBytecode = artifact.deployedBytecode || artifact.bytecode; // Use deployed bytecode or fallback to bytecode

// Remove metadata from both on-chain and local bytecodes
const onChainBytecodeNoMeta = removeMetadata(onChainBytecode);
const localBytecodeNoMeta = removeMetadata(localBytecode);

console.log('On-chain bytecode (no metadata):', onChainBytecodeNoMeta);
console.log('Local bytecode (no metadata):', localBytecodeNoMeta);

console.log('On-chain bytecode length (no metadata):', onChainBytecodeNoMeta.length);
console.log('Local bytecode length (no metadata):', localBytecodeNoMeta.length);

if (onChainBytecodeNoMeta === localBytecodeNoMeta) {
    console.log('Bytecodes match exactly when ignoring metadata!');
} else {
    console.log('Bytecodes do not match. Analyzing differences...');
    const firstDiff = findFirstDifference(onChainBytecodeNoMeta, localBytecodeNoMeta);
    console.log('First differing position:', firstDiff);
    console.log('On-chain bytecode around differing position:', onChainBytecodeNoMeta.slice(firstDiff - 10, firstDiff + 10));
    console.log('Local bytecode around differing position:', localBytecodeNoMeta.slice(firstDiff - 10, firstDiff + 10));
}

// Helper function to find the first differing position between two bytecodes
function findFirstDifference(str1, str2) {
    const minLength = Math.min(str1.length, str2.length);
    for (let i = 0; i < minLength; i++) {
        if (str1[i] !== str2[i]) {
            return i;
        }
    }
    return minLength;
}